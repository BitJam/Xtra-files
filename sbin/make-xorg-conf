#!/bin/bash

# Create a minimal xorg.conf that sets the resolution and/or the video driver.
#
# If our name is "buildxconfig" then we mimic the behavior of the older version.
# Otherwise we behave better and take all of our input via the command line.
#
# If boot parameter "xorgconf" is given or an "xres=xxx" is given then we set
# the resolution.
#
# If an "xdrvr=xxx" is given then we set the video driver.
#
# If both conditions are met then we set both
#
# Whenever we set the resolution then we also add other modes as fallbacks.


ME=${0##*/}
case $ME in
    buildxconfig) LEGACY_MODE=true;;
esac

XORG_CONF=./xorg.conf
DO_XORG=

usage() {
    local ret=${1:-0}
    cat <<Usage
Usage: $ME [options] [driver,resolution,"safe"]

Create an xorg.conf file based on the arguments given on the command line.
Unknown arguments are ignored.  Send the output to stdout unless a file
is specified.  Use "xres=safe" to set the driver to "vesa" and the resolution
to a selection of safe (we hope) options.

Options:
    -f --file=<file>  Write output to <file> instead of stdout
    -h --help         Show this usage
    --                Optional delimiter to indicate the end of options

Xorg Arguments:
A comma delimited list of options.

    safe              Set driver to "vesa" and set default resolutions
    auto              Set default resolutions
    HHHHxWWWW         Set the resolution

Any other argument is considered to be the name of a graphics driver.
Usage
    exit $ret
}

main() {

    # Read command line params that start with "-" and remove them from "$@"
    local param
    while [ $# -gt 0 -a -n "$1" -a -z "${1##-*}" ]; do
        param=${1#-}
        shift
        case $param in
                -help|h) usage             ;;
                -file|f) [ $# -gt 0 ] || error "Expected a filename after $param"
                         FILE=$1; shift    ;;
            -file=*|f=*) FILE=${param#*=}  ;;
                      -) break             ;;
                      *) error "Unknown command line argument -$param"
        esac
    done

    if [ "$LEGACY_MODE" ]; then
        [ $# -gt 0 ] && FILE=$1
        : ${CMDLINE:=$(cat /proc/cmdline)}
        read_cmdline $CMDLINE
        [ -n "$DO_XORG" ] || exit
    else
        read_args $1
    fi

    if [ "$FILE" ]; then
        mkdir -p $(dirname "$FILE")
        [ -e "$FILE" -a ! -e "$FILE.bak" ] && mv $FILE $FILE.bak
        write_xorg_conf "$X_RES" "$X_DRVR" > $FILE
    else
        write_xorg_conf "$X_RES" "$X_DRVR"
    fi
}

read_args() {
    local param
    for param in ${1//,/ };  do
        case $param in
            safe)   X_RES=auto  ; X_DRVR=vesa  ;;
            auto)   X_RES=auto                 ;;
               *)   if echo $param | grep -q "^[0-9]\+x[0-9]\+$"; then
                        X_RES=$param
                    else
                        X_DRVR=$param
                    fi;;
        esac
    done
}

read_cmdline() {
    local param value
    for param ; do
        value=${param#*=}
        case $param in
                 xres=safe)  X_DRVR=vesa   ;  X_RES=auto   ;;
            xdrvr=*|drvr=*)  X_DRVR=$value ;  DO_XORG=true ;;
              xres=*|res=*)  X_RES=$value  ;  DO_XORG=true ;;
                  xorgconf)                   DO_XORG=true ;;
                    noxorg)                   exit 0       ;;
          esac
    done
}

modes_section() {
    local res_param=$1
    [ "$res_param" ] || return
    local res_regex="[0-9]\+x[0-9]\+"
    local x_res=$(echo "$res_param" | grep -o "$res_regex")

    local modes add_modes

    case $x_res in
         1024x768) add_modes=' "800x600"'                                                           ;;
        1280x1024) add_modes=' "1024x768"  "800x600"'                                               ;;
         1280x800) add_modes=' "1280x768"  "1024x768"  "800x600"'                                   ;;
        1920x1200) add_modes=' "1680x1050" "1440x900"  "1280x1024" "1280x800" "1024x768" "800x600"' ;;
        1680x1050) add_modes=' "1440x900"  "1280x1024" "1280x800"  "1024x768" "800x600"'            ;;
        1600x1200) add_modes=' "1450x1050" "1280x1024" "1024x768"  "800x600"'                       ;;
        1450x1050) add_modes=' "1280x1024" "1024x768"  "800x600"'                                   ;;
         1440x900) add_modes=' "1280x1024" "1280x800"  "1024x768"  "800x600"'                       ;;
         1280x768) add_modes=' "1280x800"  "1333x768" "1024x768"  "800x600"'                        ;;
                *) add_modes=' "1280x1024" "1333x768" "1024x768"  "800x600"'                        ;;
    esac

    add_modes=$(echo "$add_modes" | sed -r -e "s/ \"$x_res\"//" -e "s/\s+/ /g")

    [ -n "$x_res"     ] && modes="\"$x_res\""
    [ -n "$add_modes" ] && modes="$modes$add_modes"

    cat<<Modes_Section
    SubSection "Display"
        Modes $modes
    EndSubSection
Modes_Section
}

driver_entry() {
    local driver=$1
    [ "$driver" ] || return
    printf "\n    Driver     \"$driver\""
}

write_xorg_conf() {
    local mode=$1  driver=$2

    cat <<Xorg_Conf
#----------------------------------------------------------------------
# xorg.conf file
#
# Generated by $ME sometime around $(date)
#
# If you want to save customizations, delete the line above or this
# file will get automatically deleted on the next live boot.
#----------------------------------------------------------------------

Section "Monitor"
    Identifier "Monitor0"
    Option "DPMS" "true"
    HorizSync    30-75
    VertRefresh  55-70
EndSection

Section "Device"
    Identifier "Device0"$(driver_entry $driver)
EndSection

Section "Screen"
    Identifier "Screen0"
    Monitor "Monitor0"
    Device  "Device0"
$(modes_section $mode)
EndSection
Xorg_Conf
}

error() {
    echo "$ME Error: $*" >&2
    exit 7
}

main "$@"
